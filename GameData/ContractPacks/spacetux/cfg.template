// Credit to tjsnh for his Advanced Progression Contracts.  I got a lot
// of inspiration from his contracts and used a several of his contracts
// as templates for these
// The Advanced Progression Contracts mod is available at:
//   https://kerbalstuff.com/mod/642/Advanced%20Progression%20Contracts
// and is strongly recommended to be used with this mod

// License is CC BY-NC-SA 4.0
// https://creativecommons.org/licenses/by-nc-sa/4.0/


CONTRACT_TYPE
{
// For debugging
//trace = true
	name = First Orbit
	group = STGUnmannedMissions
	title = Let's get a probe into orbit

	topic = orbit
	subject = HomeWorld()
	motivation = Because....

	notes = Complete the following:
	synopsis = Send a probe to space and get it into orbit around our homeworld
	completedMessage = You did it! You've successfully gotten a probe into orbit
	agent = Space Penguins, Inc
	cancellable = true
	declinable = true
	prestige = Exceptional
	targetBody = HomeWorld()
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 5.0
	rewardFunds = Random(18000.0, 22000.0)
	advanceFunds = Random(9000.0, 11000.0)
	
	PARAMETER
	{
		name = Orbit
		type = Orbit
	
		situation = ORBITING
		minInclination = 0
		minEccentricity = 0.0
		
	}
}

CONTRACT_TYPE
{
// For debugging
//trace = true
	name = First Return from Orbit
	group = STGUnmannedMissions
	title = Orbit a probe and return it safely home

	topic = orbit
	subject = HomeWorld()
	motivation = Because....

	notes = Complete the following:
	synopsis = Send a probe to space and get it into orbit around our homeworld and then get it back
	completedMessage = You did it! You've successfully gotten a probe into orbit and returned it home
	agent = Space Penguins, Inc
	cancellable = true
	declinable = true
	prestige = Exceptional
	targetBody = HomeWorld()
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 5.0
	rewardFunds = Random(18000.0, 22000.0)
	advanceFunds = Random(9000.0, 11000.0)
	
	PARAMETER
	{
		name = VesselParameterGroup_1
		type = VesselParameterGroup
		completeInSequence = true
	
		PARAMETER
		{
			name = Orbit
			type = Orbit
	
			situation = ORBITING
			minInclination = 0
			minEccentricity = 0.0
			
			disableOnStateChange = true
			
			completeInSequence = true
		
		}
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			completeInSequence = true
		}
	}
}

///////////////////////////////////////
//
// Unmanned Flyby
//
///////////////////////////////////////

CONTRACT_TYPE
{
// For debugging
//trace = true
	name = First Unmanned Flyby
	group = STGUnmannedMissions
	genericTitle = Do an unmanned flyby
	title = Perform an unmanned @STGUnmannedMissions:UnmannedMissionPlanet flyby mission.

	// description = Send a probe to perform a flyby of the @STGUnmannedMissions:UnmannedMissionPlanet !  This will be a strong demonstration of our capabilities, and an important 'first' for our space program! 
	topic = flyby
	subject = @STGUnmannedMissions:UnmannedMissionPlanet
	motivation = future landing

	notes = Complete the following:
	synopsis = Send a probe to space within the SOI of @STGUnmannedMissions:UnmannedMissionPlanet
	completedMessage = You did it! We've send a probe on a @STGUnmannedMissions:UnmannedMissionPlanet flyby
	agent = Space Penguins, Inc
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = @STGUnmannedMissions:UnmannedMissionPlanet
	deadline = @STGUnmannedMissions:travelTime * 10
//	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 5.0
	rewardFunds = Random(18000.0, 22000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 99.0

//	BEHAVIOUR
//	{
//		name = DialogBox
//		type = DialogBox
//
//		DIALOG_BOX
//		{
//			title = test dialog box
//			condition = CONTRACT_ACCEPTED
//			TEXT
//			{
//				text = text to display 
//			}
//		}
//	}



	REQUIREMENT
	{
		name = ReachSpace_1
		type = ReachSpace
	}
	
	// Make sure they did not do a flyby first
	REQUIREMENT
	{
		name = FlyBy
		type = FlyBy
		
		invertRequirement = true
	}

	DATA
	{
		type = String

		hidden = true
		uniquenessCheck = GROUP_ALL
		requiredValue = true

		uid = FirstUnmannedFlyby:@STGUnmannedMissions:UnmannedMissionPlanet.Name()
	}

//	DATA
//	{
//		type = List<CelestialBody>
//		requiredValue = false
//		localPlanetFlybys = $planetFlybys
//	}
	
//	BEHAVIOUR
//	{
//		name = Expression_1a
//		type = Expression
//
//		CONTRACT_COMPLETED_SUCCESS
//		{
//			type = List<CelestialBody>
//
//			@/localPlanetFlybys = @/localPlanetFlybys.Add(@/targetBody)
//			$planetFlybys = @/localPlanetFlybys
//		}
//	}
//
//
//	REQUIREMENT
//	{
//		name = Expression_1b
//		type = Expression
//
//		expression = @/localPlanetFlybys.Contains(@/targetBody) == false
//
//	}

	REQUIREMENT
	{
		name = Orbit
		type = Orbit

		// Target body, defaulted from the contract if not supplied.
		//
		// Type:	  CelestialBody
		// Required:  No (defaulted)
		//
		targetBody = HomeWorld()
	}



<REMOTETECH>
<ANTENNARANGE>

	PARAMETER
	{
		name = Sequence_1
		type = Sequence
//		title = Flyby @STGUnmannedMissions:UnmannedMissionPlanet
		title = Flyby @/targetBody

		PARAMETER
		{
			name = VesselParameterGroup_1
			type = VesselParameterGroup
			//define = @STGUnmannedMissions:UnmannedMissionPlanet Flyby
			completeInSequence = true

			PARAMETER
			{
				name = HasCrew_1
				type = HasCrew
				maxCrew = 0
				minCrew = 0
			}
			PARAMETER
			{
				name = ReachState_1
				type = ReachState
				// This should be 500 km
				maxAltitude = 500000
				targetBody = @/targetBody
			}
			PARAMETER
			{
				name = ReachState_Escaping_1
				type = ReachState
				situation = ESCAPING
				targetBody = @/targetBody
			}
		}
	}
}

///////////////////////////////////////
//
// Unmanned Impact
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = First Impact
	group = STGUnmannedMissions
	genericTitle = Crash a probe on a planet
	title = Crash a probe on @STGUnmannedMissions:UnmannedMissionPlanet !
	// description = We want to get larger, clearer closeup pictures.  To do this, we need to send a probe to crash on @STGUnmannedMissions:UnmannedMissionPlanet .  This will be a monumental achievement.

	topic = crash
	subject = @STGUnmannedMissions:UnmannedMissionPlanet
	motivation = moar pictures

	notes = Complete the following:
	synopsis = Launch an unmanned probe and have it crash onto the @STGUnmannedMissions:UnmannedMissionPlanet
	completedMessage = Future generations will remember this day.
	agent = Space Penguins, Inc
	// agent = Research & Development Department

	minExpiry = 50.0
	maxExpiry = 100.0
	// Contract deadline in days.  Default is no deadline.
	deadline = @STGUnmannedMissions:travelTime * 10
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = @STGUnmannedMissions:UnmannedMissionPlanet
//	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 10.0
	rewardFunds = Random(18000.0, 22000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	
	REQUIREMENT
	{
		name = ReachSpace_2
		type = ReachSpace
	}

	// Make sure they did a flyby first
	REQUIREMENT
	{
		name = FlyBy
		type = FlyBy
	}
	
	// If we've landed, then no need to crash a probe into it
	REQUIREMENT
	{
		name = Nolanding_2
		type = Landing

		invertRequirement = true
	}

	DATA
	{
		type = String

		hidden = true
		uniquenessCheck = GROUP_ALL
		requiredValue = true

		uid = FirstImpact:@STGUnmannedMissions:UnmannedMissionPlanet.Name()
	}


//	// No impact contracts until a flyby is completed
//	DATA
//	{
//		type = List<CelestialBody>
//		requiredValue = false
//		localPlanetFlybys = $planetFlybys
//	}
//	REQUIREMENT
//	{
//		name = Expression_3b
//		type = Expression
//
//		expression = @/localPlanetFlybys.Contains(@STGUnmannedMissions:UnmannedMissionPlanet) == true
//
//	}
	
<REMOTETECH>
<ANTENNARANGE>

	PARAMETER
	{
		name = VPG_2
		type = VesselParameterGroup

		PARAMETER
		{
			name = HasCrew_2
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}	
		PARAMETER
		{
			name = ReachState_2
			type = ReachState

			// Minimum and maximum altitudes.
			minAltitude = 0
			maxAltitude = 75000

			// Minimum and maximum speeds
			minSpeed = 250
			maxSpeed = 5000

			// Text to use for the parameter
			// Default Vessel State: <state details>
			//title =
		}
		PARAMETER
		{
			name = VesselDestroyed_1
			type = VesselDestroyed
			mustImpactTerrain = true
			completeInSequence = true
		}
	}
}


///////////////////////////////////////
//
// Unmanned Targeted Impact
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = Targeted Impact
	group = STGUnmannedMissions
	genericTitle = Crash a probe on a target
	title = Crash a probe on @STGUnmannedMissions:UnmannedMissionPlanet on a target!
	// description = We want to get larger, clearer closeup pictures of a potential landing site.  To do this, we need to send a probe to crash on @STGUnmannedMissions:UnmannedMissionPlanet and impact at the specified location.  This will be a monumental achievement.

	topic = crash
	subject = @STGUnmannedMissions:UnmannedMissionPlanet
	motivation = moar pictures

	notes = Complete the following:
	synopsis = Launch an unmanned probe and have it crash onto the @STGUnmannedMissions:UnmannedMissionPlanet at a specific location
	completedMessage = Future generations will remember this day.
	agent = Space Penguins, Inc
	// agent = Research & Development Department

	minExpiry = 50.0
	maxExpiry = 100.0
	// Contract deadline in days.  Default is no deadline.
	deadline = @STGUnmannedMissions:travelTime * 10
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = @STGUnmannedMissions:UnmannedMissionPlanet
//	maxCompletions = 3
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 15.0
	rewardFunds = Random(28000.0, 32000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	
	DATA
	{
		type = List<CelestialBody>

		hidden = true
		requiredValue = false
		impactedPlanets = $impactedPlanets
	}
//	BEHAVIOUR
//	{
//		name = Expression
//		type = Expression
//		
//		CONTRACT_COMPLETED_SUCCESS
//		{
//			type = List<CelestialBody>
//			
//			@/impactedPlanets = @/impactedPlanets.Add(@/targetBody)
//			$impactedPlanets = @/impactedPlanets
////			$impactedPlanets = $impactedPlanets.Add(@/targetBody)
//		}
//	}	

	
	REQUIREMENT
	{
		name = ReachSpace_3
		type = ReachSpace
	}

	// Make sure they did a flyby first
	REQUIREMENT
	{
		name = FlyBy
		type = FlyBy
	}
	
	// If we've landed, then no need to crash a probe into it
	REQUIREMENT
	{
		name = Nolanding_3
		type = Landing
		targetBody = @/targetBody
		invertRequirement = true
	}

	DATA
	{
		type = String

		hidden = true
		uniquenessCheck = GROUP_ALL
		requiredValue = true

		uid = TargetedImpact:@STGUnmannedMissions:UnmannedMissionPlanet.Name()
	}

//	REQUIREMENT
//	{
//		name = Expression_3a
//		type = Expression
//
//		expression = @/impactedPlanets.Contains(@/targetBody) == true
//
//	}
	
//	// No impact contracts until a flyby is completed
//	DATA
//	{
//		type = List<CelestialBody>
//		requiredValue = false
//		localPlanetFlybys = $planetFlybys
//	}
//	REQUIREMENT
//	{
//		name = Expression_3b
//		type = Expression
//
//		expression = @/localPlanetFlybys.Contains(@/targetBody) == true
//
//	}
	
	
<REMOTETECH>
<ANTENNARANGE>

	PARAMETER
	{
		name = VPG_3
		type = VesselParameterGroup

		PARAMETER
		{
			name = HasCrew_3
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}	
		PARAMETER
		{
			name = ReachState_3
			type = ReachState

			// Minimum and maximum altitudes.
			minAltitude = 0
			maxAltitude = 75000

			// Minimum and maximum speeds
			minSpeed = 250
			maxSpeed = 5000

			// Text to use for the parameter
			// Default Vessel State: <state details>
			//title =
		}

		PARAMETER
		{
			name = VisitWaypoint_3
			type = VisitWaypoint
			index = 0
			distance = 10000
			hideOnCompletion = true
		}

		PARAMETER
		{
			name = VesselDestroyed_3
			type = VesselDestroyed
			mustImpactTerrain = true
			completeInSequence = true
		}
	}

	BEHAVIOUR
	{
		name = WaypointGenerator_3
		type = WaypointGenerator
		
		// Use this to generate a waypoint with random coordinates
		RANDOM_WAYPOINT
		{
			// The name of the waypoint - displayed on the marker
			// name = Impact Target
	
			// Body for the waypoint - defaulted from the contract if not
			// supplied.
			// targetBody = Kerbin
	
			// The number of waypoints to generate.
			// Default = 1
			count = 1
	
			// The icon to use when displaying the waypoint.  If the path
			// is not specified, the Squad/Contracts/Icons directory is
			// assumed.  Otherwise, the path must be from GameData/
			icon = thermometer
	
			// The altitude of the waypoint.
			// Default: A random value between 0.0 and the atmosphere ceiling.
			// If there's no atmosphere, then always 0.0
			altitude = 0.0
	
			// Whether the waypoint generated can be on water
			// Default = true
			waterAllowed = true
	
			// Force the waypoint to fall along the equator.  For boring
			// contracts.
			// Default = false
			forceEquatorial = false
		}
	
	}
}

///////////////////////////////////////
//
// Orbit a satellite
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = First Orbital Satellite
	group = STGUnmannedMissions
	genericTitle = Orbit an unmanned satellite at another planet
	title = Put a probe in orbit around @STGUnmannedMissions:UnmannedMissionPlanet
	// description = We want you to place a satellite in orbit around @STGUnmannedMissions:UnmannedMissionPlanet . This will be a significant 'first' for our space program! The satellite doesn't need to be anything fancy, just cobble something together and put it up there!

	topic = satellites
	subject = @STGUnmannedMissions:UnmannedMissionPlanet
	motivation = test

	notes = Complete the following:
	synopsis = Put a satellite in orbit around @STGUnmannedMissions:UnmannedMissionPlanet .
	completedMessage = You did it! We've placed a satellite in orbit around @STGUnmannedMissions:UnmannedMissionPlanet !  This will be a day long remembered.
	agent = Space Penguins, Inc
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = @STGUnmannedMissions:UnmannedMissionPlanet
	deadline = @STGUnmannedMissions:travelTime * 10
//	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 15.0
	rewardFunds = Random(28000.0, 32000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	REQUIREMENT
	{
		name = ReachSpace_4
		type = ReachSpace
	}
	
//	// No orbital contracts until a flyby is completed
//	DATA
//	{
//		type = List<CelestialBody>
//		requiredValue = false
//		localPlanetFlybys = $planetFlybys
//	}
//
//	REQUIREMENT
//	{
//		name = Expression_3b
//		type = Expression
//
//		expression = @/localPlanetFlybys.Contains(@/targetBody) == true
//
//	}

	// Make sure they did a flyby first
	REQUIREMENT
	{
		name = FlyBy
		type = FlyBy
	}
	
	DATA
	{
		type = String

		hidden = true
		uniquenessCheck = GROUP_ALL
		requiredValue = true

		uid = FirstOrbitalSatellite:@STGUnmannedMissions:UnmannedMissionPlanet.Name()
	}

	
<REMOTETECH>
<ANTENNARANGE>

	PARAMETER
	{
		name = VPG_4
		type = VesselParameterGroup
		define = Satellite
		PARAMETER
		{
			name = HasCrew_4
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}
		PARAMETER
		{
			name = Orbit_4
			type = Orbit
			targetBody = @/targetBody
			minAltitude = 8000			
		}
	}
}

///////////////////////////////////////
//
// Polar Orbit a satellite
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = Polar Orbital Satellite
	group = STGUnmannedMissions
	genericTitle = Put a probe in a polar orbit at another planet
	title = Put a probe in a polar orbit at @STGUnmannedMissions:UnmannedMissionPlanet .
	// description = We want you to place a satellite in orbit around @STGUnmannedMissions:UnmannedMissionPlanet .  This will be a significant 'first' for our space program! The satellite doesn't need to be anything fancy, just cobble something together and put it up there!

	topic = satellites
	subject = @STGUnmannedMissions:UnmannedMissionPlanet
	motivation = test

	notes = Complete the following:
	synopsis = Put a satellite in orbit around @STGUnmannedMissions:UnmannedMissionPlanet .
	completedMessage = You did it! We've placed a satellite in orbit around @STGUnmannedMissions:UnmannedMissionPlanet !  This will be a day long remembered.
	agent = Space Penguins, Inc
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = @STGUnmannedMissions:UnmannedMissionPlanet
	deadline = @STGUnmannedMissions:travelTime * 10
//	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 15.0
	rewardFunds = Random(28000.0, 32000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	REQUIREMENT
	{
		name = ReachSpace_4
		type = ReachSpace
	}
	
//	// No orbital contracts until a flyby is completed
//	DATA
//	{
//		type = List<CelestialBody>
//		requiredValue = false
//		localPlanetFlybys = $planetFlybys
//	}
//	REQUIREMENT
//	{
//		name = Expression_3b
//		type = Expression
//
//		expression = @/localPlanetFlybys.Contains(@/targetBody) == true
//
//	}

	// Make sure they did a flyby first
	REQUIREMENT
	{
		name = FlyBy
		type = FlyBy
	}
	
	DATA
	{
		type = String

		hidden = true
		uniquenessCheck = GROUP_ALL
		requiredValue = true

		uid = PolarOrbitalSatellite:@STGUnmannedMissions:UnmannedMissionPlanet.Name()
	}

<REMOTETECH>
<ANTENNARANGE>

	PARAMETER
	{
		name = VPG_4
		type = VesselParameterGroup
		define = Satellite
		PARAMETER
		{
			name = HasCrew_4
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}
		PARAMETER
		{
			name = PolarOrbit_4
			type = ReachSpecificOrbit
			index = 0
			deviationWindow = 3
		}
	}
	BEHAVIOUR
	{
		name = PolarOrbitGenerator
		type = OrbitGenerator

		RANDOM_ORBIT
		{
			targetBody = @/targetBody
			type = POLAR
			// difficulty = 1
		}
	}
}

///////////////////////////////////////
//
// Equatorial Orbit a satellite
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = Equatorial OrbitalSat
	group = STGUnmannedMissions
	genericTitle = Put a probe in a equatorial orbit at another planet
	title = Orbit the first satellite in an equatorial orbit around @STGUnmannedMissions:UnmannedMissionPlanet .
	// description = We want you to place a satellite in orbit around @STGUnmannedMissions:UnmannedMissionPlanet .  This will be a significant 'first' for our space program! The satellite doesn't need to be anything fancy, just cobble something together and put it up there!

	topic = satellites
	subject = @STGUnmannedMissions:UnmannedMissionPlanet
	motivation = test

	notes = Complete the following:
	synopsis = Put a satellite in orbit around @STGUnmannedMissions:UnmannedMissionPlanet .
	completedMessage = You did it! We've placed a satellite in orbit around @STGUnmannedMissions:UnmannedMissionPlanet !  This will be a day long remembered.
	agent = Space Penguins, Inc
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = @STGUnmannedMissions:UnmannedMissionPlanet
	deadline = @STGUnmannedMissions:travelTime * 10
//	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 15.0
	rewardFunds = Random(28000.0, 32000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	REQUIREMENT
	{
		name = ReachSpace_4
		type = ReachSpace
	}
	
//	// No orbital contracts until a flyby is completed
//	DATA
//	{
//		type = List<CelestialBody>
//		requiredValue = false
//		localPlanetFlybys = $planetFlybys
//	}
//	REQUIREMENT
//	{
//		name = Expression_3b
//		type = Expression
//
//		expression = @/localPlanetFlybys.Contains(@/targetBody) == true
//
//	}

	// Make sure they did a flyby first
	REQUIREMENT
	{
		name = FlyBy
		type = FlyBy
	}
	
	DATA
	{
		type = String

		hidden = true
		uniquenessCheck = GROUP_ALL
		requiredValue = true

		uid = EquatorialOrbitalSatellite:@STGUnmannedMissions:UnmannedMissionPlanet.Name()
	}

	
<REMOTETECH>
<ANTENNARANGE>

	PARAMETER
	{
		name = VPG_4
		type = VesselParameterGroup
		define = Satellite
		PARAMETER
		{
			name = HasCrew_4
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}
		PARAMETER
		{
			name = EquatorialOrbit_4
			type = ReachSpecificOrbit
			index = 0
			deviationWindow = 3
		}
	}
	BEHAVIOUR
	{
		name = EquatorialOrbitGenerator
		type = OrbitGenerator

		RANDOM_ORBIT
		{
			targetBody = @/targetBody
			type = EQUATORIAL 
			// difficulty = 1
		}
	}
}

///////////////////////////////////////
//
// Kolniya Orbit a satellite
//
///////////////////////////////////////

CONTRACT_TYPE
{
 	name = Kolniya Orbital Satellite
 	group = STGUnmannedMissions
 	genericTitle = Put a probe in a Kolniya orbit at a planet
 	title = Orbit the first satellite in a Kolniya orbit around @STGUnmannedMissions:KolniyaMissionPlanet .
 	// description = We want you to place a satellite in orbit around @STGUnmannedMissions:KolniyaMissionPlanet . This will be a significant 'first' for our space program! The satellite doesn't need to be anything fancy, just cobble something together and put it up there!
 
 	topic = satellites
 	subject = @STGUnmannedMissions:KolniyaMissionPlanet
 	motivation = test
 
 	notes = Complete the following:
 	synopsis = Put a satellite in orbit around @STGUnmannedMissions:KolniyaMissionPlanet .
 	completedMessage = You did it! We've placed a satellite in orbit around @STGUnmannedMissions:KolniyaMissionPlanet !  This will be a day long remembered.
 	agent = Space Penguins, Inc
 	cancellable = true
 	declinable = true
 	prestige = Significant
 	targetBody = @STGUnmannedMissions:KolniyaMissionPlanet
 	deadline = @STGUnmannedMissions:travelTime * 10
 //	maxCompletions = 1
 	maxSimultaneous = 1
 	rewardScience = 25.0
 	rewardReputation = 15.0
 	rewardFunds = Random(28000.0, 32000.0)
 	advanceFunds = Random(9000.0, 11000.0)
 	// weight = 10.0
 	REQUIREMENT
 	{
 		name = ReachSpace_4
 		type = ReachSpace
 	}
 
 //	// No orbital contracts until a flyby is completed
 //	DATA
 //	{
 //		type = List<CelestialBody>
 //		requiredValue = false
 //		localPlanetFlybys = $planetFlybys
 //	}
 //	REQUIREMENT
 //	{
 //		name = Expression_3b
 //		type = Expression
 //
 //		expression = @/localPlanetFlybys.Contains(@/targetBody) == true
 //
 //	}
 
 	// Make sure they did a flyby first
 	REQUIREMENT
 	{
 		name = FlyBy
 		type = FlyBy
 	}
 	
 	DATA
 	{
 		type = String
 
 		hidden = true
 		uniquenessCheck = GROUP_ALL
 		requiredValue = true
 
 		uid = KolniyaOrbitalSatellite:@STGUnmannedMissions:KolniyaMissionPlanet.Name()
 	}
 
 	
 	
 <REMOTETECH>
 <ANTENNARANGE>
 
 	PARAMETER
 	{
 		name = VPG_4
 		type = VesselParameterGroup
 		define = Satellite
 		PARAMETER
 		{
 			name = HasCrew_4
 			type = HasCrew
 			maxCrew = 0
 			minCrew = 0
 		}
 		PARAMETER
 		{
 			name = KolniyaOrbit_4
 			type = ReachSpecificOrbit
 			index = 0
 			deviationWindow = 3
 		}
 	}
 	BEHAVIOUR
 	{
 		name = EquatorialOrbitGenerator
 		type = OrbitGenerator
 
 		RANDOM_ORBIT
 		{
 			targetBody = @/targetBody
 			type = KOLNIYA
 			// difficulty = 1
 		}
 	}
 }
 
///////////////////////////////////////
//
// Tundra a satellite
//
///////////////////////////////////////
 
CONTRACT_TYPE
{
 	name = Tundra Orbital Satellite
 	group = STGUnmannedMissions
	genericTitle = Put a probe in a Tundra orbit at another planet
 	title = Orbit the first satellite in a Tundra orbit around @STGUnmannedMissions:TundraMissionPlanet .
 	// description = We want you to place a satellite in orbit around @STGUnmannedMissions:TundraMissionPlanet . This will be a significant 'first' for our space program! The satellite doesn't need to be anything fancy, just cobble something together and put it up there!
 
 	topic = satellites
 	subject = @STGUnmannedMissions:TundraMissionPlanet
 	motivation = test
 
 	notes = Complete the following:
 	synopsis = Put a satellite in orbit around @STGUnmannedMissions:TundraMissionPlanet .
 	completedMessage = You did it! We've placed a satellite in orbit around @STGUnmannedMissions:TundraMissionPlanet !  This will be a day long remembered.
 	agent = Space Penguins, Inc
 	cancellable = true
 	declinable = true
 	prestige = Significant
 	targetBody = @STGUnmannedMissions:TundraMissionPlanet
 	deadline = @STGUnmannedMissions:travelTime * 10
 //	maxCompletions = 1
 	maxSimultaneous = 1
 	rewardScience = 25.0
 	rewardReputation = 15.0
 	rewardFunds = Random(28000.0, 32000.0)
 	advanceFunds = Random(9000.0, 11000.0)
 	// weight = 10.0
 	REQUIREMENT
 	{
 		name = ReachSpace_4
 		type = ReachSpace
 	}
 
 //	// No orbital contracts until a flyby is completed
 //	DATA
 //	{
 //		type = List<CelestialBody>
 //		requiredValue = false
 //		localPlanetFlybys = $planetFlybys
 //	}
 //	REQUIREMENT
 //	{
 //		name = Expression_3b
 //		type = Expression
 //
 //		expression = @/localPlanetFlybys.Contains(@/targetBody) == true
 //
 //	}
 
 	// Make sure they did a flyby first
 	REQUIREMENT
 	{
 		name = FlyBy
 		type = FlyBy
 	}
 	
 	DATA
 	{
 		type = String
 
 		hidden = true
 		uniquenessCheck = GROUP_ALL
 		requiredValue = true
 
 		uid = TundraOrbitalSatellite:@STGUnmannedMissions:TundraMissionPlanet.Name()
 	}
 
 	
 	
 <REMOTETECH>
 <ANTENNARANGE>
 
 	PARAMETER
 	{
 		name = VPG_4
 		type = VesselParameterGroup
 		define = Satellite
 		PARAMETER
 		{
 			name = HasCrew_4
 			type = HasCrew
 			maxCrew = 0
 			minCrew = 0
 		}
 		PARAMETER
 		{
 			name = TundraOrbit_4
 			type = ReachSpecificOrbit
 			index = 0
 			deviationWindow = 3
 		}
 	}
 	BEHAVIOUR
 	{
 		name = EquatorialOrbitGenerator
 		type = OrbitGenerator
 
 		RANDOM_ORBIT
 		{
 			targetBody = @/targetBody
 			type = KOLNIYA
 			// difficulty = 1
 		}
 	}
 }
 



// <LANDING_FOLLOWS>
///////////////////////////////////////
//
// Unmanned Landing
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = First Unmanned Landing
	group = STGUnmannedMissions
	genericTitle = Land a probe on another planet
	title = Land a probe on the @STGUnmannedMissions:UnmannedMissionPlanet !
	// description = Time to do an unmanned landing on the @STGUnmannedMissions:UnmannedMissionPlanet !

	topic = landing
	subject = Srv_@STGUnmannedMissions:UnmannedMissionPlanet
	motivation = want to be sure the @STGUnmannedMissions:UnmannedMissionPlanet will support a ship (isn't made out of dust) before we send a manned craft.  This will be a monumental achievement.

	notes = Complete the following:
	synopsis = Launch an unmanned probe and have it land on the @STGUnmannedMissions:UnmannedMissionPlanet
	completedMessage = Future generations will remember this day.
	agent = Space Penguins, Inc
	// agent = Research & Development Department

	minExpiry = 50.0
	maxExpiry = 100.0
	// Contract deadline in days.  Default is no deadline.
	deadline = @STGUnmannedMissions:travelTime * 10
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = @STGUnmannedMissions:UnmannedMissionPlanet
//	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 20.0
	rewardFunds = Random(38000.0, 42000.0)
	advanceFunds = Random(19000.0, 21000.0)
	// weight = 10.0
	
//	DATA
//	{
//		type = List<CelestialBody>
//		requiredValue = false
//		impactedPlanets = $impactedPlanets
//	}
//	
	DATA
	{
		type = String

		hidden = true
		uniquenessCheck = GROUP_ALL
		requiredValue = true

		uid = FirstUnmannedLanding:@STGUnmannedMissions:UnmannedMissionPlanet.Name()
	}

//	BEHAVIOUR
//	{
//		name = Expression
//		type = Expression
//		
//		CONTRACT_COMPLETED_SUCCESS
//		{
//			type = List<CelestialBody>
//			
//			@/impactedPlanets = @/impactedPlanets.Add(@/targetBody)
//			$impactedPlanets = @/impactedPlanets
//		}
//	}	
	
	
	
	REQUIREMENT
	{
		name = ReachSpace_5
		type = ReachSpace
	}
	REQUIREMENT
	{
		name = Expression_HasSurface
		type = Expression
		
		title = Planet has surface
		expression = @/targetBody.HasSurface()
	}
	
	// If we've landed, then no need to land again 
	REQUIREMENT
	{
		name = Nolanding_5
		type = Landing
		targetBody = @/targetBody
		invertRequirement = true
	}
	
//	REQUIREMENT
//	{
//		name = Expression_6
//		type = Expression
//		
//		expression = @/impactedPlanets.Contains(@/targetBody) == true
//	}

	// Make sure they did a flyby first
	REQUIREMENT
	{
		name = FlyBy
		type = FlyBy
	}
	
	
<REMOTETECH>
<ANTENNARANGE>
	
	PARAMETER
	{
		name = VPG__6
		type = VesselParameterGroup

		PARAMETER
		{
			name = HasCrew_6
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}	
		

		PARAMETER
		{
			name = ReachState_6
			type = ReachState
			situation = LANDED
			completeInSequence = true
			disableOnStateChange = true
		}
	}
}

///////////////////////////////////////
//
// Unmanned Targeted Landing
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = Targeted Unmanned Landing
	group = STGUnmannedMissions
	genericTitle = Land a probe at a specified target
	title = Land a probe on the @STGUnmannedMissions:UnmannedMissionPlanet at a specified target!
	// description = Time to do a targeted, unmanned landing on the @STGUnmannedMissions:UnmannedMissionPlanet !  This will be a monumental achievement.

	topic = landing
	subject = Srf_@STGUnmannedMissions:UnmannedMissionPlanet
	motivation = want to be get close-up pictures of a projected landing site for a future manned landing on @STGUnmannedMissions:UnmannedMissionPlanet . 

	notes = Complete the following:
	synopsis = Launch an unmanned probe and have it land on the @STGUnmannedMissions:UnmannedMissionPlanet
	completedMessage = Future generations will remember this day.
	agent = Space Penguins, Inc

	minExpiry = 50.0
	maxExpiry = 100.0
	// Contract deadline in days.  Default is no deadline.
	deadline = @STGUnmannedMissions:travelTime * 10
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = @STGUnmannedMissions:UnmannedMissionPlanet
//	maxCompletions = 5
	maxSimultaneous = 2
	rewardScience = 25.0
	rewardReputation = 25.0
	rewardFunds = Random(43000.0, 47000.0)
	advanceFunds = Random(19000.0, 21000.0)
	// weight = 10.0
	
//	DATA
//	{
//		type = List<CelestialBody>
//		requiredValue = false
//		impactedPlanets = $impactedPlanets
//	}
	
	DATA
	{
		type = String

		hidden = true
		uniquenessCheck = GROUP_ALL
		requiredValue = true

		uid = TargetedUnmannedLanding:@STGUnmannedMissions:UnmannedMissionPlanet.Name()
	}

//	BEHAVIOUR
//	{
//		name = Expression
//		type = Expression
//		
//		CONTRACT_COMPLETED_SUCCESS
//		{
//			type = List<CelestialBody>
//			@/impactedPlanets = @/impactedPlanets.Add(@/targetBody)
//			$impactedPlanets = @/impactedPlanets
//		}
//	}	
	
	
	REQUIREMENT
	{
		name = ReachSpace_7
		type = ReachSpace
	}
	
//	REQUIREMENT
//	{
//		name = Expression_7
//		type = Expression
//
//		expression = @/impactedPlanets.Contains(@/targetBody) == true
//	}

	// Make sure they did a flyby first
	REQUIREMENT
	{
		name = FlyBy
		type = FlyBy
	}
	
	
<REMOTETECH>
<ANTENNARANGE>

	PARAMETER
	{
		name = VPG__7
		type = VesselParameterGroup
		// nightingale - I'd let the title default itself in most cases
		//  title = Vessel: Any; Duration: 1 year

		PARAMETER
		{
			name = HasCrew_7
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}	

		PARAMETER
		{
			name = VisitWaypoint_8
			type = VisitWaypoint
			index = 0
			distance = 5000
			hideOnCompletion = true
		}

		PARAMETER
		{
			name = ReachState_7
			type = ReachState
			situation = LANDED
			completeInSequence = true
			disableOnStateChange = true
		}		
	}
	BEHAVIOUR
	{
		name = WaypointGenerator_8
		type = WaypointGenerator
		
		// Use this to generate a waypoint with random coordinates
		RANDOM_WAYPOINT
		{
			// The name of the waypoint - displayed on the marker
			name = Impact Target
	
			// Body for the waypoint - defaulted from the contract if not
			// supplied.
			// targetBody = Kerbin
	
			// The number of waypoints to generate.
			// Default = 1
			count = 1
	
			// The icon to use when displaying the waypoint.  If the path
			// is not specified, the Squad/Contracts/Icons directory is
			// assumed.  Otherwise, the path must be from GameData/
			icon = thermometer
	
			// The altitude of the waypoint.
			// Default: A random value between 0.0 and the atmosphere ceiling.
			// If there's no atmosphere, then always 0.0
			altitude = 0.0
	
			// Whether the waypoint generated can be on water
			// Default = true
			waterAllowed = true
	
			// Force the waypoint to fall along the equator.  For boring
			// contracts.
			// Default = false
			forceEquatorial = false
		}
	
	}
}
